@charset "utf-8"; /* RESET */
:root {
    --color-mc: #5c584f;
    --color-nm: #573d29;
    --color-sc: #231815;
    --color-bk: #000;
    --color-pc: #D7000F;
    --color-pco: #f45000;
    --color-yw: #FFF700;
    --color-ic: #286BD0;
    --color-df: #212121;
    --color-st: #777;
    --color-ph: #bbb;
    --color-pg: #ccc;
    --color-ml: #ddd;
    --color-ct: #e2e2e2;
    --color-cl: #eee;
    --color-cs: #eceae6;
    --color-hg: #f6f6f6;
    --color-lg: #f3f3f3;
    --color-wt: #fff;
    --color-bt: #a2a2a2;
    --color-scs: #707070;
    --color-sct: #5d5d5d;
    --color-en: #8d8d8d
}

html,body,button,dl,dt,dd,div,form,fieldset,legend,h1,h2,h3,h4,h5,h6,input,select,textarea,ul,ol,li,p,pre,table,td,th,caption,a {
    margin: 0;
    padding: 0
}

html {
    font-size: 16px;
    font-size-adjust: none;
    -ms-text-size-adjust: none;
    -webkit-text-size-adjust: none
}

body {
    margin: 0;
    padding: 0;
    color: var(--color-df);
    font-weight: 400;
    font-family: Pretendard,apple-system,'Apple SD Gothic Neo','맑은 고딕',sans-serif;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent
}

h1,h2,h3,h4,h5 {
    font-weight: 600;
    font-size: 30px
}

strong {
    font-weight: 400
}

/* '스크린 리더기 전용 텍스트'  */
legend {
    display: block;
    position: absolute; /* 문서의 흐름에서 제거, 가장 가까운 부모 요소를 기준으로 위치 지정 */
    overflow: hidden; /* 넘치는 부분은 자름 */
    clip: rect(0 0 0 0); /* 요소의 모든 부분을 잘라냄 */
    width: 1px; /* 시각적으로는 거의 보이지 않게 함 */
    height: 1px
}

input,textarea,select {
    border: 1px solid var(--color-ml);
    border-radius: 0;
    font-size: 16px;
    font-family: Pretendard,apple-system,'Apple SD Gothic Neo','맑은 고딕',sans-serif;
    vertical-align: top;
    box-sizing: border-box;
    outline: none
}

textarea {
    width: 100%;
    height: 100%;
    border: 0;
    border-radius: 0;
    font-size: 16px;
    resize: none;
    outline: none
}

textarea::placeholder {
    color: var(--color-pg)
}

select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background: url('../images/common/bg_select.png') no-repeat top 19px right 17px/11px auto;
    color: var(--color-st)
}

button {
    border: 0;
    background: 0;
    font-weight: 400;
    font-size: 16px;
    font-family: Pretendard,apple-system,'Apple SD Gothic Neo','맑은 고딕',sans-serif;
    color: var(--color-df);
    cursor: pointer
}


a {
    color: var(--color-df)
}

::placeholder {
    color: var(--color-ph)
}

input:disabled {
    border: 1px solid var(--color-ml);
    background: var(--color-hg);
    cursor: default;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none
}

input[type="text"]::-ms-clear {
    display: none
}

input[type="number"]::-webkit-outer-spin-button, input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0
}

select::-ms-expand {
    display: none
}

ol,ul {
    list-style: none
}

a {
    text-decoration: none;
    vertical-align: top
}

img {
    width: 100%;
    vertical-align: top
}

i, em {
    font-style: normal
}

table {
    border-collapse: collapse; /* 경계는 합침*/
    border-spacing: 0;
    width: 100%
}

caption {
    display: block;
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    width: 1px;
    height: 1px
}

figure, figcaption {
    position: relative;
    margin: 0;
    padding: 0
}

/*숨김 텍스트*/
.blind {
    display: block;
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    width: 1px;
    height: 1px
}

/* 스크롤(공통) */
::-webkit-scrollbar {
    width: 12px
}

::-webkit-scrollbar-track {
    border-radius: 30px;
    background: #f8f8f8
}

::-webkit-scrollbar-thumb {
    border-radius: 30px;
    background: var(--color-ml);
}

::-moz-selection {
    background: rgba(92,88,79,.7);
    color: var(--color-wt)
}

/* Code for Firefox */
::selection {
    background: rgba(92,88,79,.7);
    color: var(--color-wt)
}

/* 
1. 스크롤바 스타일링 (::-webkit-scrollbar)
이 부분은 주로 Chrome, Safari, Edge, Opera 등 WebKit 기반 브라우저에 적용되는 코드예요.

::-webkit-scrollbar: 스크롤바 전체를 선택해요. width 속성으로 스크롤바의 너비를 12px로 지정했어요.

::-webkit-scrollbar-track: 스크롤바의 **빈 공간(트랙)**을 선택해요. border-radius로 모서리를 둥글게 하고, background로 배경색을 설정했어요.

::-webkit-scrollbar-thumb: 스크롤바를 움직이는 **막대(썸)**를 선택해요. border-radius로 모서리를 둥글게 하고, background로 막대의 색을 var(--color-ml) 변수로 지정했어요.

2. 텍스트 선택 영역 스타일링 (::selection, ::-moz-selection)
이 부분은 사용자가 마우스로 텍스트를 드래그하여 선택했을 때의 배경색과 글자색을 바꾸는 문법이에요.

::-moz-selection: Firefox 전용 선택자예요. Firefox 브라우저에서 텍스트를 선택했을 때 적용될 스타일을 지정해요.

::selection: 그 외 대부분의 브라우저(Chrome, Safari 등)에서 적용되는 표준 선택자예요.

두 선택자 모두 background로 선택 영역의 배경색을, color로 선택된 텍스트의 글자색을 변경했어요. var(--color-wt)는 CSS 변수로, 흰색을 나타내는 것으로 보여요.
 */


 /* 건너뛰기 */
#skip_nav {
    width: 100%;
    height: 0; /* 높이를 0으로 만들어 시각적으로 숨김 */
    text-align: center;
    overflow: hidden /* 넘치는 내용 숨김 */
}

#skip_nav a:focus, #skip_nav a:hover, #skip_nav a:active {
    overflow: visible;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 50px;
    background-color: #3a3a3a;
    font-weight: 700;
    font-size: 18px;
    line-height: 50px;
    color: #fff;
    text-decoration: underline;
    z-index: 99
}

/* 
:focus, :hover, :active 의사 클래스(Pseudo-classes)를 사용해 사용자가 상호작용할 때만 스타일이 적용되게 해요.

overflow: visible;, display: block;, height: 50px;를 통해 요소가 보이게 만들어요.

position: absolute;와 top: 0; left: 0;를 사용해 웹페이지의 가장 왼쪽 상단에 위치시켜 사용자가 쉽게 찾을 수 있게 했어요.

background-color, font-size, color 등의 속성으로 가시성을 높여서 사용자가 링크의 존재를 명확하게 알 수 있도록 했어요.

z-index: 99;는 다른 요소들 위에 링크가 항상 보이게 하기 위해 사용돼요.
 */


/*******************************
*	버튼
하나의 .btn 클래스를 기본으로 사용하면서, 여러 추가 클래스(sml, inner, fixed, wd100)를 조합해 
버튼의 모양과 위치를 유연하게 바꿀 수 있게 만들었죠.
********************************/
.btn {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: 100%;
    margin: 0 auto;
    font-weight: 600;
    font-size: 18px;
    text-align: center;
    -webkit-transition-duration: .5s;
    transition-duration: .5s;
    box-sizing: border-box
}

/* 
display: flex;: 버튼 내부의 요소들을 정렬하기 위해 flexbox 레이아웃을 사용했어요.

align-items: center;와 justify-content: center;: 버튼 안의 텍스트나 아이콘을 세로와 가로 방향으로 완벽하게 중앙 정렬해요.

width: 100%;: 버튼이 부모 요소의 너비 전체를 차지하도록 해요.

transition-duration: .5s;: 버튼에 마우스를 올렸을 때(hover) 등의 상태 변화가 0.5초에 걸쳐 부드럽게 일어나도록 애니메이션 효과를 줬어요.
 */

.btn:not(.sml) {
    height: 60px;
    line-height: 60px
}

.btn.sml {
    height: 58px;
    line-height: 58px
}

/* 
:not(.sml): .btn 클래스를 가졌지만, .sml 클래스는 없는 요소에 적용돼요. 이 버튼은 height: 60px로 설정돼요.

.btn.sml: .btn과 .sml 클래스를 모두 가진 버튼에 적용돼요. 이 버튼은 height: 58px로 설정되어 조금 더 작은 버튼이 돼요.
 */

.btn > * {
    flex-shrink: 1;
    position: relative;
    width: 100%;
    height: 100%;
    margin-left: 6px;
    color: var(--color-wt);
    transition: all .2s;
    box-sizing: border-box
}

/* 
> *: .btn의 모든 직계 자식 요소에 적용되는 스타일이에요.

flex-shrink: 1;: flexbox 아이템의 기본 축소 비율을 1로 설정해요.

margin-left: 6px;: 각 요소 사이에 6px의 간격을 둬서 요소들을 분리해요.
 */

.btn.inner {
    position: absolute;
    bottom: 0;
    left: 0;
    margin: 30px 0 20px 0;
    padding: 0 20px;
    font-weight: 700;
    font-size: 16px
}

.btn.fixed {
    position: fixed;
    bottom: 0;
    left: 0;
    height: 56px;
    font-weight: 700;
    font-size: 16px;
    line-height: 56px
}

/* 
position: fixed;: 이 버튼을 **뷰포트(브라우저 화면)**에 고정해요.

bottom: 0;와 left: 0;: 화면의 가장 아래쪽, 왼쪽에 위치시켜요. 
스크롤을 내려도 항상 같은 위치에 보이게 되죠. 예를 들어, 모바일 화면의 하단에 고정된 구매하기 버튼 등에 사용돼요.
 */

.btn *:first-child {
    margin-top: 0;
    margin-left: 0
}

.btn.wd100 {
    flex-wrap: wrap;
    height: auto;
    margin-top: 30px;
    line-height: 56px
}

.btn.wd100 > * {
    flex-shrink: 0;
    margin-top: 10px;
    margin-left: 0
}

/* 
flex-wrap: wrap;: 버튼 안의 요소들이 한 줄에 다 들어가지 않으면 다음 줄로 넘어가게 해요.

height: auto;: 내용에 따라 버튼의 높이가 자동으로 조절돼요.

margin-top: 10px;: 각 버튼 요소 위에 10px의 간격을 줘서 여러 개의 버튼을 세로로 정렬할 때 유용하게 만들어요.
 */

/*

flex-wrap에는 세 가지 주요 속성 값이 있어요.

nowrap (기본값):

모든 flex 아이템을 한 줄에 배치해요. 공간이 부족하면 아이템들의 크기가 강제로 줄어들어요.

wrap:

아이템들이 컨테이너의 공간이 부족할 때 다음 줄로 넘어가서 여러 줄로 배치돼요.

wrap-reverse:

wrap과 동일하게 여러 줄로 배치하지만, 줄의 순서가 반대로 돼요. 첫 번째 줄이 컨테이너의 아래쪽에 위치하고, 다음 줄들이 위로 쌓여요.

flex-wrap 속성은 특히 반응형 웹 디자인에서 유용하게 사용돼요. 화면 크기가 작아졌을 때 아이템들이 한 줄에 뭉치지 않고 자동으로 줄바꿈되어 사용자에게 더 보기 좋은 레이아웃을 제공할 수 있기 때문이죠.
*/

/*버튼 컬러*/
.btnStyle-1 {
    color: var(--color-pc);
    border: 1px solid var(--color-pc);
    background-color: var(--color-wt)
}

/* 빨강 글씨, 빨강 테두리, 흰 배경 */
.btnStyle-2 {
    color: var(--color-wt);
    border: 1px solid var(--color-pc);
    background-color: var(--color-pc)
}

/* 흰 글씨, 빨강 테두리, 빨강 배경 */
.btnStyle-3 {
    color: var(--color-pc);
    border: 1px solid var(--color-cs);
    background-color: var(--color-cs)
}

/* 빨강 글씨, 연회색 테두리, 연회색 배경 */
.btnStyle-4 {
    color: var(--color-wt);
    border: 1px solid var(--color-mc);
    background-color: var(--color-mc)
}

/* 흰색 글씨, 진갈색 테두리, 진갈색 배경 */
.btnStyle-5 {
    color: var(--color-df);
    border: 1px solid var(--color-pg);
    background-color: var(--color-wt)
}

/* 검정 글씨, 연회색 테두리, 흰 배경 */
.btnStyle-6 {
    color: var(--color-wt);
    border: 1px solid var(--color-ph);
    background-color: var(--color-ph)
}

/* 흰 글씨, 연회색 테두리, 연회색 배경 */
.btnStyle-7 {
    color: var(--color-sct);
    border: 1px solid var(--color-scs);
    background-color: var(--color-wt)
}

/* 진회색 글씨, 진회색 테두리, 흰 배경 */
.btnStyle-8 {
    color: var(--color-df);
    border: 1px solid var(--color-scs);
    background-color: var(--color-wt)
}

/* 검정 글씨, 707070 테두리, 흰 배경 */
.btnStyle-9 {
    color: var(--color-bt);
    border: 1px solid var(--color-pg);
    background-color: var(--color-lg)
}

/* 회색 글씨, 진회색 테두리, 연회색 배경 */
.btnStyle-10 {
    color: var(--color-en);
    border: 1px solid var(--color-ml);
    background-color: var(--color-wt)
}

/* 8d8d8d 글씨, ddd 테두리, fff 배경 */
.btnStyle-11 {
    color: var(--color-df);
    border: 1px solid var(--color-pg);
    background-color: var(--color-lg)
}

/* 212121 글씨, ccc 테두리, f3f3f3 배경 */
.btnStyle-12 {
    color: var(--color-st);
    border: 1px solid var(--color-ml);
    background-color: var(--color-wt)
}

/* 777 글씨, ddd 테두리, fff 배경 */
.btnStyle-13 {
    color: var(--color-mc);
    border: 1px solid var(--color-mc);
    background-color: var(--color-wt)
}

/* 흰색 글씨, 진갈색 테두리, 진갈색 배경 */
.btnStyle-14 {
    color: var(--color-df);
    border: 1px solid var(--color-df);
    background-color: var(--color-wt)
}

/* 212121 글씨, 212121 테두리, fff 배경 */
/*비활성화*/
.btn.disabled {
    color: #c2c3c2;
    background-color: #f7f7f7;
    border: 1px solid #e0e0e0;
    cursor: default
}

.btn.disabled:hover {
    color: #c2c3c2;
    background-color: #f7f7f7;
    border: 1px solid #e0e0e0;
    cursor: default
}

/*******************************
*	input
********************************/
.formArea {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    position: relative;
    width: 100%
}

.formArea + .formArea {
    margin-top: 20px
}

.formArea + .infoArea {
    margin-top: 20px
}

.formArea label {
    flex-shrink: 0;
    width: 110px;
    margin-right: 10px;
    vertical-align: top
}

.formArea .ip_txt {
    display: inline-block;
    position: relative;
    height: 46px;
    padding: 0 50px 0 20px;
    background: var(--color-wt);
    line-height: 44px;
    vertical-align: top;
    box-sizing: border-box
}

.formArea .ip_txt:read-only, .formArea input:disabled {
    padding-right: 0;
    border-color: var(--color-ml);
    background: var(--color-lg)
}

.formArea .ip_big {
    display: block;
    position: relative;
    width: 100%;
    height: 50px;
    padding: 0 50px 0 20px;
    background: var(--color-wt);
    line-height: 48px
}

.formArea .btnDel {
    display: none;
    position: absolute;
    top: 0px;
    right: 13px;
    width: 40px;
    height: 44px;
    padding: 12px 0;
    z-index: 2;
    box-sizing: border-box;
    cursor: pointer
}

.formArea.on .btnDel {
    display: block
}

.formArea .ip_big + .btnDel {
    height: 50px;
    padding: 13px 0
}

/*
.formArea .ip_big + .btnDel
이 선택자는 .formArea 클래스를 가진 요소 내부에 있는 ip_big 클래스 바로 다음에 오는 btnDel 클래스를 가진 요소를 선택해요.

+ (인접 형제 선택자): 이 기호는 **'바로 다음에 오는 형제 요소'**를 의미해요. 
즉, .ip_big 클래스를 가진 요소와 같은 레벨에 있으면서 바로 뒤에 오는 .btnDel을 정확하게 지정하는 거죠.


*/

.formArea .btnDel::before {
    content: '\2715';
    display: block;
    width: 24px;
    height: 24px;
    margin: 0 auto;
    border-radius: 50%;
    background: var(--color-ml);
    font-size: 14px;
    line-height: 24px;
    color: var(--color-wt);
    padding-left: 1px;
    text-align: center;
    box-sizing: border-box
}

/*

.formArea .btnDel::before
이 선택자는 .btnDel 클래스를 가진 요소 앞에 가상 요소를 만들어 삭제 아이콘을 넣는 부분이에요.

::before (가상 요소 선택자): HTML에 실제로 존재하지 않지만, CSS를 통해 특정 요소의 앞에 콘텐츠를 삽입할 때 사용해요.

content: '\2715';: 이 부분이 가장 중요해요. \2715는 유니코드 문자로, '✕' 모양의 십자(X) 기호를 나타내요. 이 코드를 통해 삭제 버튼에 아이콘 이미지를 사용하는 대신, 텍스트 문자를 아이콘처럼 활용할 수 있어요.

display: block;: 가상 요소를 블록 요소로 만들어 너비와 높이를 가질 수 있게 해요.

width: 24px; 와 height: 24px;: 가상 요소의 크기를 24px로 설정해요.

border-radius: 50%;: 가상 요소의 모서리를 50%만큼 둥글게 만들어 동그란 원 모양으로 만들어요.

background: var(--color-ml);: 원의 배경색을 --color-ml 변수로 지정해요.

font-size: 14px; 와 line-height: 24px;: 십자(✕) 기호의 크기와 세로 정렬을 설정해요. line-height를 height와 동일하게 설정해서 글자가 세로 중앙에 오도록 해요.

text-align: center; 와 color: var(--color-wt);: 십자 기호를 가로로 중앙에 정렬하고 글자색을 흰색으로 지정해 배경색과 대비되도록 했어요.

이 코드를 통해 웹사이트에서 깔끔하고 통일된 삭제 버튼을 만들 수 있으며, 이미지 파일을 따로 불러올 필요 없이 CSS만으로 아이콘을 구현할 수 있다는 장점이 있어요.
*/


.errorMsg {
    display: none;
    padding: 10px 0 0 120px;
    font-size: 14px;
    color: var(--color-pc);
    word-break: keep-all
}

.formArea .msg {
    flex-shrink: 0;
    width: 100%;
    padding: 12px 0 0 140px;
    font-size: 14px;
    box-sizing: border-box
}

.formArea .msg .sub {
    color: var(--color-en)
}

.formArea .time {
    display: block;
    position: absolute;
    top: 15px;
    right: 127px;
    font-size: 15px;
    color: var(--color-pc)
}

/* .formArea label + .ip_txt + .btnDel {top:44px} */
.formArea.formBtn .btnDel {
    right: 102px
}

/* .formArea.formBtn {display:flex;flex-wrap:wrap} */
.formArea.formBtn .ip_txt {
    width: 350px
}

.formArea.formBtn .btnInput {
    width: 90px;
    height: 46px;
    margin-left: 10px;
    font-weight: 400;
    font-size: 16px;
    line-height: 44px;
    text-align: center;
    box-sizing: border-box
}


.formArea.on .btnInput.btnStyle-9 {
    color: var(--color-df);
    cursor: pointer
}

/*
.formArea.on .btnInput.btnStyle-9
이 선택자는 .formArea와 .on 클래스를 모두 가진 요소 안에 있는, .btnInput과 .btnStyle-9 클래스를 모두 가진 버튼에 적용돼요.

.on: 이 클래스는 폼이 활성화된 상태일 때 추가되는 클래스로 보여요. 예를 들어, 사용자가 폼에 입력을 시작했거나 특정 조건을 만족했을 때 활성화될 수 있어요.

color: var(--color-df);: 버튼의 글자색을 --color-df라는 변수의 색상으로 변경해요.

cursor: pointer;: 마우스 커서를 **손가락 모양(포인터)**으로 바꿔 사용자가 이 버튼을 클릭할 수 있음을 직관적으로 알려줘요.
*/

.formArea.invalid .ip_txt {
    border-color: var(--color-pc)
}

.formArea.invalid.incorrect .ip_txt {
    border-color: var(--color-ml)
}

/* 
.invalid: 이 클래스는 유효성 검사에서 실패했을 때, 즉 사용자가 잘못된 값을 입력했을 때 추가되는 클래스예요.

border-color: var(--color-pc);: 입력 필드의 테두리 색상을 --color-pc 변수 색상으로 변경해요. 
이는 사용자에게 입력 내용에 오류가 있음을 시각적으로 경고하는 역할을 해요.

.incorrect: invalid와 유사하지만, 더 구체적인 '잘못된' 또는 '틀린' 상태를 나타내는 것으로 보여요. 예를 들어, 비밀번호 확인 필드가 일치하지 않거나 아이디가 존재하지 않을 때 사용될 수 있어요.

border-color: var(--color-ml);: 입력 필드의 테두리 색상을 --color-ml 변수 색상으로 변경해요. 이는 invalid 상태보다 더 강한 오류를 나타내는 데 사용될 수 있어요.
 */

.formArea.invalid .errorMsg, .formArea.incorrect .errorMsg {
    display: block
}

.formArea.correct::after {
    content: '';
    display: block;
    position: absolute;
    top: 16px;
    right: 20px;
    width: 17px;
    height: 13px;
    background: url('../images/common/icon_sprites.png') no-repeat -294px -198px
}

/* 
. 입력이 올바를 때 (.formArea.correct::after)
이 코드는 .formArea와 .correct 클래스를 모두 가진 요소 뒤에 확인(✓) 아이콘을 표시해요.

::after: 선택한 요소의 뒤에 가상 요소를 생성해요. 이 가상 요소에 아이콘 이미지를 넣어요.

position: absolute;와 top: 16px;, right: 20px;: 아이콘을 부모 요소(formArea)를 기준으로 오른쪽 상단에 정확히 배치해요.

background: url(...) no-repeat -294px -198px: icon_sprites.png라는 이미지 파일에서 특정 좌표(-294px -198px)에 있는 부분 이미지를 잘라내서 아이콘으로 사용해요. 이것은 여러 아이콘을 하나의 이미지 파일에 담아 효율적으로 사용하는 CSS 스프라이트 기법이에요.

 */

.formArea.rgt .ip_txt {
    padding-right: 86px
}

.formArea.rgt.incorrect::before {
    content: '사용불가';
    display: block;
    position: absolute;
    top: 16px;
    right: 42px;
    font-weight: 300;
    font-size: 14px;
    line-height: 14px;
    color: var(--color-pc);
    z-index: 2
}

.formArea.rgt.incorrect::after {
    content: '';
    display: block;
    position: absolute;
    top: 16px;
    right: 20px;
    width: 17px;
    height: 13px;
    background: url('../images/common/icon_sprites.png') no-repeat -262px -70px
}

/* 
. 입력이 잘못되었을 때 (.formArea.rgt.incorrect)
이 부분은 .rgt(right) 클래스와 .incorrect 클래스가 함께 사용될 때, 두 가지 시각적인 피드백을 제공해요.

.formArea.rgt.incorrect::before (텍스트 메시지):

::before: 요소의 앞에 가상 요소를 생성하고 여기에 '사용불가'라는 텍스트를 넣어요.

content: '사용불가';: '사용불가'라는 텍스트를 가상 요소의 내용으로 지정해요.

position: absolute;와 top: 16px;, right: 42px;: 텍스트를 아이콘 옆에 배치해서 사용자에게 자세한 상태를 알려줘요.

color: var(--color-pc);: 이 텍스트를 경고를 나타내는 색상으로 변경해요.

.formArea.rgt.incorrect::after (X 아이콘):

::after: 요소의 뒤에 가상 요소를 생성하고, 이번에는 오류를 나타내는 'X' 아이콘을 표시해요.

background: url(...) no-repeat -262px -70px: 동일한 CSS 스프라이트 이미지에서 다른 위치의 'X' 아이콘을 잘라와서 사용해요.

.formArea.rgt .ip_txt (패딩):

padding-right: 86px: .rgt 클래스가 있는 폼 내부의 입력 필드(ip_txt)에 오른쪽 패딩을 줘요. 이는 오른쪽에 표시되는 아이콘과 텍스트가 입력된 내용과 겹치지 않도록 공간을 확보하는 역할을 해요. */


/* .searchArea {padding:0;border-bottom:3px solid #efefef;background:var(--color-wt)} */

.formArea.address > .ip_txt {
    width: 220px
}

.formArea.address > .btnInput {
    width: 120px
}

.formArea .innerFormArea {
    display: flex;
    position: relative;
    width: 100%;
    padding-left: 120px
}

.formArea .innerFormArea .ip_txt, .formArea .innerFormArea .btnInput {
    margin-top: 14px
}

.formArea .innerFormArea .time {
    top: 29px;
    right: 12px
}

.formArea .innerFormArea .ip_txt {
    flex: 1
}

.formArea.formBtn .innerFormArea .time {
    right: 111px
}


/*******************************
*	select box
********************************/
.selectArea {
    display: inline-block;
    position: relative;
    vertical-align: top
}

.selectArea .sltCurrent {
    display: block;
    position: relative;
    width: 100%;
    height: 46px;
    padding: 0 40px 0 16px;
    border: 1px solid var(--color-ml);
    background-color: var(--color-wt);
    /* background:var(--color-wt) url('../images/common/icon_select.png') no-repeat top 19px right 20px; */
    font-weight: 300;
    line-height: 46px;
    box-sizing: border-box
}

.selectArea .sltCurrent::before {
    content: '';
    display: block;
    position: absolute;
    top: 19px;
    right: 20px;
    width: 14px;
    height: 8px;
    background: url('../images/common/icon_select.png') no-repeat;
    transition: all .2s
}

.selectArea select {
    background: url('../images/common/icon_select.png') no-repeat top 19px right 20px
}

.selectArea span.sltCurrent {
    color: var(--color-pg)
}

.selectArea .sltList {
    overflow-y: auto;
    display: none;
    position: absolute;
    top: 43px;
    left: 0;
    width: 100%;
    max-height: 190px;
    padding: 0 15px;
    border: 1px solid var(--color-ml);
    border-top: 0;
    background: var(--color-wt);
    box-sizing: border-box;
    overscroll-behavior: contain;
    z-index: 3
}

.selectArea .sltList::-webkit-scrollbar {
    width: 6px
}

.selectArea .sltList li {
    width: 100%;
    text-overflow: ellipsis;
    white-space: nowrap;
    border-top: 1px solid var(--color-cl);
    font-weight: 300;
    line-height: 44px
}

.selectArea .sltList li a {
    display: block;
    width: 100%;
    height: 100%;
    box-sizing: border-box
}

.selectArea .sltList li a.soldout {
    color: #999
}

.selectArea.invalid .sltCurrent {
    color: var(--color-pg)
}

/* .selectArea.on .sltCurrent {border-color:var(--color-ml)} */
.selectArea.on .sltCurrent::before {
    transform: rotate(180deg)
}

.selectArea.on .sltList {
    display: block
}
